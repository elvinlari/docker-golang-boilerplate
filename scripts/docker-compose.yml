version: '3.7'

networks:
  keycloak-network:

volumes:
  keycloak-postgres:
  keycloak-postgres-backup:
  keycloak-database-backups:

services:

  go:
    image: golang:latest
    working_dir: /go/src/github.com/elvinlari/docker-golang
    volumes:
      - ../:/go/src/github.com/elvinlari/docker-golang
    links:
      - postgres:postgres
    profiles: ["develop"]
    environment:
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${DB_PORT}
      DB_TIMEZONE: "UTC"
      GO_PORT: ":8081"
      REALMCONFIG_URL: "http://keycloak:8080/realms/lynq"
      KEYCLOAK_CLIENTID: "DemoServiceClient"
      TEST_JWT_TOKEN: ${TEST_JWT_TOKEN}
    depends_on:
      - postgres
    networks:
      - keycloak-network
    ports:
      - "9000:8081"
    entrypoint: ['go']

  go-app:
    container_name: go-app
    build:
      context: ./../
      dockerfile: ./scripts/Dockerfile
    image: go-app
    links:
      - postgres:postgres
    environment:
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${DB_PORT}
      DB_TIMEZONE: "UTC"
      GO_PORT: ":8081"
      REALMCONFIG_URL: "http://keycloak:8080/realms/lynq"
      KEYCLOAK_CLIENTID: "DemoServiceClient"
      TEST_JWT_TOKEN: ${TEST_JWT_TOKEN}
    depends_on:
      - postgres
    networks:
      - keycloak-network
    ports:
      - "9000:8081"

  postgres:
    image: ${POSTGRES_IMAGE_TAG}
    volumes:
      - keycloak-postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: "${KEYCLOAK_DB_NAME},${DB_NAME}" # List of databases to create
    container_name: postgres
    networks:
      - keycloak-network
    ports:
      - :5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${KEYCLOAK_DB_NAME}", "-U", "${KEYCLOAK_DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:21.0
    environment:
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME}
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT_BACKCHANNEL: "true"
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${KEYCLOAK_DB_NAME}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USERNAME}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HEALTH_ENABLED: "true"
      KC_LOG_LEVEL: ${KEYCLOAK_LOG_LEVEL}
    networks:
      - keycloak-network
    ports:
      - 8080:8080
    command: start-dev
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8080' || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy


  backups:
    image: ${POSTGRES_IMAGE_TAG}
    command: >-
      sh -c 'sleep $KEYCLOAK_BACKUP_INIT_SLEEP &&
      while true; do
        pg_dump -h postgres -p 5432 -d $KEYCLOAK_DB_NAME -U $KEYCLOAK_DB_USER | gzip > $KEYCLOAK_POSTGRES_BACKUPS_PATH/$KEYCLOAK_POSTGRES_BACKUP_NAME-$(date "+%Y-%m-%d_%H-%M").gz &&
        find $KEYCLOAK_POSTGRES_BACKUPS_PATH -type f -mtime +$KEYCLOAK_POSTGRES_BACKUP_PRUNE_DAYS | xargs rm -f &&
        sleep $KEYCLOAK_BACKUP_INTERVAL; done'
    volumes:
      - keycloak-postgres-backup:/var/lib/postgresql/data
      - keycloak-database-backups:${KEYCLOAK_POSTGRES_BACKUPS_PATH}
    environment:
      KEYCLOAK_DB_NAME: ${KEYCLOAK_DB_NAME}
      KEYCLOAK_DB_USER: ${KEYCLOAK_DB_USER}
      PGPASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KEYCLOAK_BACKUP_INIT_SLEEP: ${KEYCLOAK_BACKUP_INIT_SLEEP}
      KEYCLOAK_BACKUP_INTERVAL: ${KEYCLOAK_BACKUP_INTERVAL}
      KEYCLOAK_POSTGRES_BACKUP_PRUNE_DAYS: ${KEYCLOAK_POSTGRES_BACKUP_PRUNE_DAYS}
      KEYCLOAK_POSTGRES_BACKUPS_PATH: ${KEYCLOAK_POSTGRES_BACKUPS_PATH}
      KEYCLOAK_POSTGRES_BACKUP_NAME: ${KEYCLOAK_POSTGRES_BACKUP_NAME}
    networks:
      - keycloak-network
    ports:
      - :5432
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy